# test values generated by Mathematica

using SpecialFunctions
using Base.Test

const SF = SpecialFunctions

S = Array(Complex, (0,))
Z = Array(Complex, (0,))
errors = Array(Complex, (0,))
rel_errors = Array(Complex, (0,))
L = 0
L2 = 0
diff = 0
rel_diff = 0

import Base.parse
function parse(::Type{Complex{Float64}}, s::String)
    bits = split(s, r"\+|\-")
    println(s)
    z = zero(Complex{Float64})
    complex_no_chars = ["im", "*I", "*i", "*j", "I", "i", "j"]
    for i=1:length(bits)
        println(bits[i])
        comp = false
        for j=1:length(complex_no_chars)
            c = complex_no_chars[j]
            if contains(bits[i], c)
                println("   c = ", c)
                z += parse(Float64,  replace(bits[i], c, "")) * im
                comp = true
                break
            end
        end
        if !comp
            z += parse(Float64, bits[i])
        end
    end
    return z
end

file = "/home/mroughan/Dropbox/src/Julia/polylog/polylog_test_data.csv"
f = open(file, "r")
for line in eachline(f)
    if ismatch(r"#", line)
    else
        v = split(line, ',')

        s = parse(Complex{Float64}, convert(String, v[1]))
        z = parse(Complex{Float64}, convert(String, v[2]))
        L = parse(Complex{Float64}, convert(String, v[3]))
        
        L2 = SF.polylog(s,z,1.0e-18)
        L3 = SF.polylog_zeta(s,z)
        diff = L - L2 
        diff3 = L - L3
        rel_diff = complex(real(diff)/real(L),  imag(diff)/imag(L))
        
        push!(S, s)
        push!(Z, z)
        push!(errors, diff)
        push!(rel_errors, rel_diff)

        # println("  L = $L,  L2 =$L2,  diff = $diff,  \t\t rel diff = $rel_diff")
        println("  s=$s, z=$z, |error|=$(ceil(log10(abs(diff)))), |error3|=$(ceil(log10(abs(diff3))))")
    end
end
